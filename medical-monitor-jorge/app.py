"""
Sistema de Monitoreo M√©dico - Jorge Agust√≠n
Aplicaci√≥n principal Streamlit
"""

import streamlit as st
from datetime import datetime
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from src.core.models import PatientData, LabResult, ConditionType, AlertLevel
from src.core.calculators import MedicalCalculator
from src.core.validators import MedicalValidator
from src.core import database as db
from src.ui.forms import render_lab_form, render_condition_form
from src.ui.dashboard import render_dashboard, render_alerts
from src.ui.charts import create_trend_chart

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Monitor M√©dico - Jorge Agust√≠n",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado
st.markdown("""
    <style>
    .main {
        padding-top: 1rem;
    }
    .stAlert {
        margin-bottom: 1rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1rem;
    }
    .critical {
        background-color: #ffebee;
        border-left: 4px solid #f44336;
    }
    .warning {
        background-color: #fff3e0;
        border-left: 4px solid #ff9800;
    }
    .normal {
        background-color: #e8f5e9;
        border-left: 4px solid #4caf50;
    }
    </style>
""", unsafe_allow_html=True)


def initialize_session_state():
    """Inicializa el estado de la sesi√≥n"""
    if 'patient_data' not in st.session_state:
        st.session_state.patient_data = PatientData()
        # Inicializar base de datos y cargar datos existentes
        st.session_state.db_conn = db.init_database()
        db.load_existing_data(st.session_state.db_conn, st.session_state.patient_data)
    if 'show_lab_form' not in st.session_state:
        st.session_state.show_lab_form = False
    if 'show_condition_form' not in st.session_state:
        st.session_state.show_condition_form = False


def main():
    """Funci√≥n principal de la aplicaci√≥n"""
    initialize_session_state()

    # Header
    st.title("üè• Sistema de Monitoreo M√©dico")
    st.markdown("### Jorge Agust√≠n Delgado Puentes")

    # Informaci√≥n de √∫ltima actualizaci√≥n
    col1, col2, col3 = st.columns([2, 2, 3])
    with col1:
        st.caption(f"üìÖ Fecha: {datetime.now().strftime('%d/%m/%Y')}")
    with col2:
        st.caption(f"üïê Hora: {datetime.now().strftime('%H:%M')}")
    with col3:
        total_labs = len(st.session_state.patient_data.lab_results)
        if total_labs > 0:
            st.caption(f"üìä Total de an√°lisis registrados: {total_labs}")
        else:
            st.caption("üìä Sin datos registrados a√∫n")

    # Sidebar para entrada de datos
    with st.sidebar:
        st.header("üìù Entrada de Datos")

        # Botones para mostrar formularios
        if st.button("‚ûï Agregar Resultado de Laboratorio", use_container_width=True):
            st.session_state.show_lab_form = not st.session_state.show_lab_form

        if st.button("üè• Actualizar Condiciones M√©dicas", use_container_width=True):
            st.session_state.show_condition_form = not st.session_state.show_condition_form

        if st.button("üíä Registrar Medicaci√≥n", use_container_width=True):
            st.info("Funci√≥n en desarrollo")

        if st.button("üìä Registrar Signos Vitales", use_container_width=True):
            st.info("Funci√≥n en desarrollo")

        st.divider()

        # Informaci√≥n del paciente
        st.subheader("üë§ Informaci√≥n del Paciente")
        st.text(f"Nombre: {st.session_state.patient_data.name}")
        st.text(f"Edad: {st.session_state.patient_data.age} a√±os")

        if st.session_state.patient_data.conditions:
            st.subheader("üìã Condiciones Actuales")
            for condition in st.session_state.patient_data.conditions:
                st.text(f"‚Ä¢ {condition.value}")
        else:
            st.info("Sin condiciones registradas")

    # √Årea principal
    if st.session_state.show_lab_form:
        render_lab_form()

    if st.session_state.show_condition_form:
        render_condition_form()

    # Tabs principales
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Dashboard",
        "üìà Tendencias",
        "üßÆ Calculadoras",
        "‚ùì Preguntas Sugeridas",
        "üìö Educaci√≥n"
    ])

    with tab1:
        render_dashboard()

    with tab2:
        render_trends_tab()

    with tab3:
        render_calculators_tab()

    with tab4:
        render_questions_tab()

    with tab5:
        render_education_tab()


def render_trends_tab():
    """Renderiza la pesta√±a de tendencias"""
    st.header("üìà Tendencias de Valores")

    if not st.session_state.patient_data.lab_results:
        st.info("No hay datos de laboratorio para mostrar tendencias. Ingrese algunos resultados primero.")
        return

    # Obtener lista de tests √∫nicos
    test_names = list(set(r.test_name for r in st.session_state.patient_data.lab_results))

    if test_names:
        selected_test = st.selectbox("Seleccione el test a visualizar:", test_names)

        if selected_test:
            results = st.session_state.patient_data.get_lab_trend(selected_test, days=365)
            if len(results) > 1:
                chart = create_trend_chart(results, selected_test)
                st.plotly_chart(chart, use_container_width=True)
            else:
                st.info(f"Se necesitan al menos 2 mediciones de {selected_test} para mostrar tendencia.")


def render_calculators_tab():
    """Renderiza la pesta√±a de calculadoras m√©dicas"""
    st.header("üßÆ Calculadoras M√©dicas")

    # Obtener datos m√°s recientes del paciente
    patient_data = st.session_state.patient_data
    calculator = MedicalCalculator()

    # Obtener valores m√°s recientes si existen
    latest_creatinine = patient_data.get_latest_lab("Creatinina")
    latest_tsh = patient_data.get_latest_lab("TSH")
    latest_t4 = patient_data.get_latest_lab("T4 Libre")
    latest_calcium = patient_data.get_latest_lab("Calcio")
    latest_pth = patient_data.get_latest_lab("PTH")
    latest_phosphorus = patient_data.get_latest_lab("F√≥sforo")
    latest_hemoglobin = patient_data.get_latest_lab("Hemoglobina")

    # Calculadora eGFR
    with st.expander("Tasa de Filtraci√≥n Glomerular (eGFR)", expanded=True):
        if latest_creatinine:
            st.success(f"üìä Usando valor m√°s reciente: Creatinina de {latest_creatinine.date.strftime('%d/%m/%Y')}")

        col1, col2, col3 = st.columns(3)
        with col1:
            default_cr = latest_creatinine.value if latest_creatinine else 1.0
            cr = st.number_input("Creatinina (mg/dL)",
                               min_value=0.1,
                               max_value=20.0,
                               value=float(default_cr),
                               step=0.1,
                               help=f"√öltimo valor: {default_cr} mg/dL ({latest_creatinine.date.strftime('%d/%m/%Y')})" if latest_creatinine else "Sin datos previos")
        with col2:
            age = st.number_input("Edad (a√±os)", min_value=18, max_value=120, value=patient_data.age, step=1)
        with col3:
            sex = st.selectbox("Sexo", ["Masculino", "Femenino"], key="egfr_sex")

        if st.button("Calcular eGFR") or latest_creatinine:
            result = calculator.egfr_ckdepi_2021(cr, age, sex == "Femenino")
            if 'error' not in result:
                col1, col2 = st.columns(2)
                with col1:
                    st.metric("eGFR", f"{result['egfr']} {result['unit']}")
                with col2:
                    color = "üü¢" if result['color'] == 'green' else "üü°" if result['color'] == 'yellow' else "üî¥"
                    st.metric("Estadio", f"{color} {result['stage']}")
                st.info(result['interpretation'])
                if result['requires_dialysis']:
                    st.error("‚ö†Ô∏è Requiere di√°lisis o trasplante renal")

    # Calculadora de riesgo de crisis tiroidea
    with st.expander("Riesgo de Crisis Mixedematosa"):
        if latest_tsh or latest_t4:
            st.success(f"üìä Usando valores m√°s recientes disponibles")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            default_tsh = latest_tsh.value if latest_tsh else 4.0
            tsh = st.number_input("TSH (ŒºUI/mL)",
                                min_value=0.01,
                                max_value=100000.0,
                                value=float(default_tsh),
                                step=1.0,
                                help=f"√öltimo valor: {default_tsh} ŒºUI/mL ({latest_tsh.date.strftime('%d/%m/%Y')})" if latest_tsh else "Sin datos previos")
        with col2:
            default_t4 = latest_t4.value if latest_t4 else 1.0
            t4 = st.number_input("T4 libre (ng/dL)",
                               min_value=0.1,
                               max_value=10.0,
                               value=float(default_t4),
                               step=0.1,
                               help=f"√öltimo valor: {default_t4} ng/dL ({latest_t4.date.strftime('%d/%m/%Y')})" if latest_t4 else "Sin datos previos")
        with col3:
            # Temperatura: asumimos hipotermia leve por el estado cr√≠tico del paciente
            temp = st.number_input("Temperatura (¬∞C)",
                                 min_value=32.0,
                                 max_value=42.0,
                                 value=35.5,  # Hipotermia com√∫n en UCI con sedaci√≥n
                                 step=0.1,
                                 help="Paciente en UCI con sedaci√≥n - com√∫n hipotermia leve")
        with col4:
            # Estado mental: estuporoso por TCE y sedaci√≥n
            mental = st.selectbox("Estado mental",
                                ["normal", "confuso", "somnoliento", "estuporoso"],
                                index=3,  # Selecciona "estuporoso" por defecto
                                key="thyroid_mental",
                                help="Paciente con TCE severo + sedaci√≥n = estuporoso")

        if st.button("Evaluar Riesgo Tiroideo") or (latest_tsh and latest_tsh.value > 10):
            result = calculator.thyroid_crisis_risk(tsh, t4, temp, mental)
            color_emoji = "üü¢" if result['color'] == 'green' else "üü°" if result['color'] == 'yellow' else "üü†" if result['color'] == 'orange' else "üî¥"

            col1, col2 = st.columns(2)
            with col1:
                st.metric("Nivel de Riesgo", f"{color_emoji} {result['risk_level']}")
            with col2:
                st.metric("Puntaje de Riesgo", f"{result['risk_score']}/100",
                        help="‚â•70: Cr√≠tico | 40-69: Alto | 20-39: Moderado | <20: Bajo")

            if result['risk_factors']:
                st.warning("**Factores de riesgo identificados:**")
                for factor in result['risk_factors']:
                    st.write(f"‚Ä¢ {factor}")

            if result['recommendations']:
                st.info("**Recomendaciones:**")
                for rec in result['recommendations']:
                    st.write(f"‚Ä¢ {rec}")

            if result['requires_urgent_action']:
                st.error("‚ö†Ô∏è REQUIERE ACCI√ìN URGENTE - Contactar endocrin√≥logo inmediatamente")

    # Nueva calculadora: An√°lisis Calcio-PTH
    with st.expander("An√°lisis Calcio-PTH"):
        if latest_calcium or latest_pth:
            st.success(f"üìä Usando valores m√°s recientes disponibles")

        col1, col2, col3 = st.columns(3)
        with col1:
            default_ca = latest_calcium.value if latest_calcium else 9.5
            calcium = st.number_input("Calcio (mg/dL)",
                                     min_value=5.0,
                                     max_value=15.0,
                                     value=float(default_ca),
                                     step=0.1,
                                     help=f"√öltimo valor: {default_ca} mg/dL ({latest_calcium.date.strftime('%d/%m/%Y')})" if latest_calcium else "Sin datos previos")
        with col2:
            default_pth = latest_pth.value if latest_pth else 50.0
            pth = st.number_input("PTH (pg/mL)",
                                min_value=1.0,
                                max_value=500.0,
                                value=float(default_pth),
                                step=1.0,
                                help=f"√öltimo valor: {default_pth} pg/mL ({latest_pth.date.strftime('%d/%m/%Y')})" if latest_pth else "Sin datos previos")
        with col3:
            default_phos = latest_phosphorus.value if latest_phosphorus else 3.5
            phosphorus = st.number_input("F√≥sforo (mg/dL)",
                                        min_value=1.0,
                                        max_value=10.0,
                                        value=float(default_phos),
                                        step=0.1,
                                        help=f"√öltimo valor: {default_phos} mg/dL ({latest_phosphorus.date.strftime('%d/%m/%Y')})" if latest_phosphorus else "Sin datos previos")

        if st.button("Analizar Balance Mineral") or (latest_pth and latest_calcium):
            result = calculator.calcium_pth_analysis(calcium, pth, phosphorus, has_irc=True)

            col1, col2, col3 = st.columns(3)
            with col1:
                ca_color = "üü¢" if result['calcium_status'] == 'normal' else "üü°" if result['calcium_status'] == 'bajo' else "üî¥"
                st.metric("Calcio", f"{ca_color} {result['calcium_status'].capitalize()}")
            with col2:
                pth_color = "üü¢" if result['pth_status'] == 'normal' else "üü°" if result['pth_status'] == 'bajo' else "üî¥"
                st.metric("PTH", f"{pth_color} {result['pth_status'].capitalize()}")
            with col3:
                if phosphorus:
                    ca_p_product = calcium * phosphorus
                    product_color = "üü¢" if ca_p_product <= 55 else "üî¥"
                    st.metric("Producto Ca√óP", f"{product_color} {ca_p_product:.1f} mg¬≤/dL¬≤")

            st.info(result['interpretation'])

            if result['findings']:
                st.warning("**Hallazgos:**")
                for finding in result['findings']:
                    st.write(f"‚Ä¢ {finding}")

            if result['requires_treatment']:
                st.error("‚ö†Ô∏è Requiere evaluaci√≥n m√©dica para ajuste de tratamiento")

    # Evaluaci√≥n de Anemia
    with st.expander("Evaluaci√≥n de Anemia"):
        if latest_hemoglobin:
            st.success(f"üìä Usando hemoglobina m√°s reciente: {latest_hemoglobin.date.strftime('%d/%m/%Y')}")

        col1, col2 = st.columns(2)
        with col1:
            default_hb = latest_hemoglobin.value if latest_hemoglobin else 12.0
            hb = st.number_input("Hemoglobina (g/dL)",
                               min_value=3.0,
                               max_value=20.0,
                               value=float(default_hb),
                               step=0.1,
                               help=f"√öltimo valor: {default_hb} g/dL ({latest_hemoglobin.date.strftime('%d/%m/%Y')})" if latest_hemoglobin else "Sin datos previos")
        with col2:
            is_male = st.selectbox("Sexo", ["Masculino", "Femenino"], key="anemia_sex") == "Masculino"

        if st.button("Evaluar Anemia") or (latest_hemoglobin and latest_hemoglobin.value < 12):
            result = calculator.anemia_evaluation(hb, is_male, has_irc=True)

            color = "üü¢" if result['severity'] == 'Sin anemia' else "üü°" if result['severity'] == 'Leve' else "üü†" if result['severity'] == 'Moderada' else "üî¥"
            st.metric("Severidad", f"{color} {result['severity']}")
            st.metric("Hemoglobina", f"{result['value']} g/dL")

            if result['recommendation']:
                st.info(f"**Recomendaci√≥n:** {result['recommendation']}")

            if result.get('requires_urgent_eval', False):
                st.error("‚ö†Ô∏è **Requiere evaluaci√≥n urgente**")


def render_questions_tab():
    """Renderiza la pesta√±a de preguntas sugeridas"""
    st.header("‚ùì Preguntas Sugeridas para el Equipo M√©dico")

    patient = st.session_state.patient_data
    questions = []

    # Generar preguntas basadas en los datos disponibles
    if patient.lab_results:
        # Buscar valores cr√≠ticos
        critical_values = patient.get_critical_values()
        for value in critical_values:
            questions.append({
                'priority': 'üî¥ Alta',
                'category': 'Valores Cr√≠ticos',
                'question': f"¬øQu√© acciones se est√°n tomando para el {value.test_name} de {value.value} {value.unit}?",
                'context': f"Valor fuera de rango normal"
            })

    # Preguntas basadas en condiciones
    if ConditionType.IRC_TERMINAL in patient.conditions:
        questions.extend([
            {
                'priority': 'üü° Media',
                'category': 'IRC',
                'question': "¬øLos medicamentos actuales est√°n ajustados para funci√≥n renal?",
                'context': "Paciente con IRC terminal"
            },
            {
                'priority': 'üü° Media',
                'category': 'IRC',
                'question': "¬øCu√°l es el plan de di√°lisis actual y su adecuaci√≥n?",
                'context': "Evaluaci√≥n de Kt/V o URR"
            }
        ])

    if ConditionType.HIPOTIROIDISMO in patient.conditions:
        questions.append({
            'priority': 'üî¥ Alta',
            'category': 'Endocrino',
            'question': "¬øSe ha considerado el riesgo de crisis mixedematosa?",
            'context': "Hipotiroidismo severo"
        })

    # Mostrar preguntas
    if questions:
        for q in questions:
            with st.container():
                col1, col2 = st.columns([1, 4])
                with col1:
                    st.markdown(f"**{q['priority']}**")
                    st.caption(q['category'])
                with col2:
                    st.markdown(f"**{q['question']}**")
                    st.caption(f"Contexto: {q['context']}")
                st.divider()
    else:
        st.info("Las preguntas sugeridas aparecer√°n aqu√≠ basadas en los datos ingresados y las condiciones del paciente.")


def render_education_tab():
    """Renderiza la pesta√±a de educaci√≥n"""
    st.header("üìö Informaci√≥n Educativa")

    topics = {
        "Insuficiencia Renal Cr√≥nica (IRC)": {
            "descripcion": "La IRC es la p√©rdida gradual de la funci√≥n renal. Los ri√±ones filtran los desechos y el exceso de l√≠quidos de la sangre.",
            "sintomas": ["Fatiga", "Hinchaz√≥n", "Cambios en la orina", "N√°useas"],
            "tratamiento": ["Di√°lisis", "Trasplante", "Medicamentos", "Dieta especial"],
            "monitoreo": ["Creatinina", "Urea", "Potasio", "F√≥sforo", "Hemoglobina"]
        },
        "Hipotiroidismo": {
            "descripcion": "Condici√≥n donde la gl√°ndula tiroides no produce suficientes hormonas tiroideas.",
            "sintomas": ["Fatiga", "Aumento de peso", "Sensibilidad al fr√≠o", "Depresi√≥n"],
            "tratamiento": ["Levotiroxina", "Monitoreo regular de TSH"],
            "monitoreo": ["TSH", "T4 libre", "T3"]
        },
        "Valores de Laboratorio": {
            "descripcion": "Entender los valores de laboratorio ayuda a seguir la evoluci√≥n del paciente.",
            "importantes": {
                "Creatinina": "Mide la funci√≥n renal. Valores altos indican da√±o renal.",
                "TSH": "Hormona estimulante de tiroides. Valores muy altos indican hipotiroidismo.",
                "Hemoglobina": "Transporta ox√≠geno. Valores bajos indican anemia.",
                "Potasio": "Electrolito crucial. Niveles anormales pueden causar arritmias."
            }
        }
    }

    for topic, info in topics.items():
        with st.expander(topic):
            if "descripcion" in info:
                st.write(f"**Descripci√≥n:** {info['descripcion']}")

            if "sintomas" in info:
                st.write("**S√≠ntomas comunes:**")
                for sintoma in info['sintomas']:
                    st.write(f"‚Ä¢ {sintoma}")

            if "tratamiento" in info:
                st.write("**Opciones de tratamiento:**")
                for trat in info['tratamiento']:
                    st.write(f"‚Ä¢ {trat}")

            if "monitoreo" in info:
                st.write("**Valores a monitorear:**")
                for valor in info['monitoreo']:
                    st.write(f"‚Ä¢ {valor}")

            if "importantes" in info:
                st.write("**Valores importantes:**")
                for key, desc in info['importantes'].items():
                    st.write(f"‚Ä¢ **{key}:** {desc}")

    st.divider()
    st.info("üí° **Tip:** Esta informaci√≥n es educativa. Siempre consulte con el equipo m√©dico para decisiones de tratamiento.")


if __name__ == "__main__":
    main()